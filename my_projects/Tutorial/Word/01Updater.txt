上期视频,我们学到了添加updater的方法,
第一种是在add_updater中插入一个匿名函数,
第二种是先定义一个函数,然后再将这个函数插入到add_updater中去
这两者在一些情况下能达到类似的效果
它的工作原理就类似计算出每一帧画面物件的状态,然后将画面插入视频流当中,生成一段连贯的动画
如果我们把每一帧计算的结果都保留在画面上,那么就形成了物件的运动路径,有些情况下就是包络线

当然,如果你在这个场景中,不想要这个更新了,那么可以采用remove_updater()这个函数将原来绑定的更新移除
这里面传入原来的动画函数
当然如果想要清空绑定于这个对象的所有更新,那么可以用obj.clear_updaters()这个方法
另外,值得一提的是,如果传入的是匿名函数,那么只能使用clear_updaters()的方法,
如果你在remove_updater()中传入原来的匿名函数,也是木大的

接下来稍微讲一讲ValueTracker()这个类
ValueTracker算是一个在画面上不可见的对象,在这里面保存了一个数值
一般来说我们都会用updater把一些物件与它绑定起来
比如我在这里写的一个例子,首先是一条数轴,一个存值器t
然后是一个三角的标尺,一个浮点数,然后让这个标尺跟随t的值进行移动,
同时浮点数的值也设置成t的值,使它能够显示在屏幕上
然后在play中设置t的值,在渲染动画的时候,与它绑定的对象就会跟随着进行变化
当然ValueTracker还有其它参数,大家可以找到定义,自行查看


接下来我们来看一个稍微复杂一点的例子
首先是一个圆,然后点P在圆上运动,在这里点P的坐标是以参数方程的形式表示的
先声明一下一些必要的对象,比如圆心,圆上最右边的点A,线段OA,以及线段OP
我们用一个圆弧来表示点P转过的角度
由于圆弧的更新相对比较难以表达,我们就直接使用become这个方法,
每一帧都变成这一时刻相对应的一个圆弧
然后测试一下

接下来我们以这个例子为基础,看到另外一个例子
我们仅保留圆和点P,然后新建一个点Q,
保持x轴坐标不动,y轴坐标与点P相同
构造一条虚线,连接这两个点
测试一下画面
接着用TracedPath画出点Q的轨迹,改一下参数,生成一下动画
可以看到点的路径已经开始生成了,
但是我们要让它不断的向右移动,形成一个正弦波
我们给路径加上一个动画更新,当然如果用def的方式写更新函数也是可以的
生成一下动画