创建自定义物件
在之前的教程中，我们提到了，manim 中的物件都套上了一个 math 的壳子，
在其中加入了不少可以利用的属性，比如坐标，边框，颜色，阴影等等，
这期视频我们要探讨的是它的一个子类：矢量图
由于继承关系，它包含了父类的属性，同时，也对父类进行了扩展
从矢量图本身的性质中我们可以得出，它有线条、图块等性质
线条由贝塞尔曲线构成，图块根据线条是否封闭来进行填充
贝塞尔曲线可以通过锚点来生成，生成过程大家可以看一下我之前的一期展示视频
具体的原理翔哥和颓废做过一期视频，大家可以去看一看
我也用最新版 manimgl 的交互窗口写了一个动态绘制 n 阶贝塞尔曲线的类，
有兴趣的可以看看，体验一下贝塞尔曲线的绘制过程
之前提到过，manim-cairo 采用的是三阶贝塞尔，而 manimgl 采用的是二阶贝塞尔
之所以用相对低阶数的曲线，大概是为了避免过于复杂的运算，减慢物件生成的速度
注意，在这里所有的图形都只是大致拟合，超出二阶或者三阶贝塞尔能够拟合的范围就会出现误差
接下来，我们就回到主题，如何创建自定义物件
既然都到了这个层面上了，大家多多少少都翻过一些源码，
看到了物件的某些成员变量，包括 data, family, shader 等等
在这里，我们要探讨的，就是 data 中的 points 属性
points 中包含的是一系列三维坐标，分别表示 x, y, z
旧版中 points 的元素数量是 4 的倍数，新版中是 3 的倍数
因为它们分别要构成一系列的三阶贝塞尔和二阶贝塞尔
现在，我们大致了解了曲线的生成原理，那么我们怎样才能通过眼睛看到这一系列的锚点呢？
很简单，我们定义一个类，用“点”物件来描摹所有锚点的位置
或者用 Integer，显示出这是第几个锚点
当然，还可以用 updater，实时显示锚点的位置
对锚点进行操作，我们就能操控物件了

那么，我们有哪些方法可以操控锚点呢？
首先，可以直接赋值，利用 numpy 本身包含的一些运算
当然，grant 也封装了一系列点集运算操作的方法
例如 apply_points_function 可以对点集进行函数的操作
add_line_to, add_quadratic_curve 等可以添加一条贝塞尔曲线
set_points_as_corners 可以绘制多边形
reverse_points 可以将点集反转
这些都可以在源码中找到，希望大家能够自己去阅读来进行了解

其中，reverse_points 这个方法可以说是比较特殊的
构成物件的锚点可以看作是有序的，从而一条贝塞尔曲线也可以看作是有向的
路径方向是从第一个锚点到最后一个锚点
而将点的顺序反转，就会导致曲线的方向也进行了反转
到目前为止看上去并没有什么卵用，下面给出一个看上去稍微实用一点的例子
A 本来的锚点保持不变，将它的点集和 B 物件点集的反转相拼接
再给 A 加上填充色，可以得到从 A 中挖去 B 的效果
假设 A 的路径是逆时针的，上色机制会对向量左边的部分进行填充
给 A 加上了 B 的逆向路径，上色机制同样会对向量左边的部分进行填充
两者同时成立，得到的就是一个中间镂空的图形了
在结合一下凸包的运算，颓废写出了几何图形的布尔运算方法
可以对图形求交、并、差，详情请关注 manim 幼儿园在 github 上的代码库
我会在视频下方放上链接

总结一下, 想要创建自定义物件, 就只要确定它的大概形状
进而计算构成路径的一系列锚点, 就能达到目的了
举两个例子, 第一个是摆线的一个周期与x轴围成的区域
方法有很多, 可以将弧线部分细分为许多线段, 最后将首尾连接
也可以使用现成的参数方程, 在最后调用 close_path 方法, 将曲线闭合
第二个是一个星星图案, 首先创建一个正方形,
然后将它每条边的中间锚点向坐标原点拉一下, 就能得到这样的效果了

下面就给大家呈现一下对锚点进行变换可以达到的效果吧
另外，像是直线这类物件，它们的锚点数量太少，
导致对它们使用函数变换时并不能达到理想的效果
因此，我们可以事先将这个物件细分成 n 小段拼接起来
使它能够尽可能的拟合在变换时的形状
