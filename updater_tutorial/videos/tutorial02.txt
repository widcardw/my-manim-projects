#2 再话alpha与updater

在上期视频中我们已经初步了解了动画,插值,以及updater的一些浅层的用法
在这里的话我再稍微做一些补充

首先,物体从静态到动态,用到了补间,
找到初始状态和终止状态,运用插值,计算出物体运动的中间过程
// 应用于矢量图,对每一组锚点进行插值,
如果是对于现实中连续的数学运算,那么就形成了完整的补间,
而对于离散的计算机运算,
就只需要计算出相对有限的数据,即计算出每一帧的画面,
将这些数据传递到可视化引擎,输出图片或视频流,
就可以让人类看到动画的每一帧,利用人类的视觉暂留,
错误地将离散的图片认为是连续的动作
这便是我们看到的视频

那有人就要问了,插值函数interpolate看上去是关于alpha的一次函数,
如果对应到速度的话,那就只有匀速运动,这样是不是有点过于单调了呢?
如果我们想要看到的是加速运动,那是不是得写很多不同的插值函数呢?

当然,这样是可行的,但是未免有些麻烦了
既然起止点已经确定,那我们是不是能修改alpha呢?
--但alpha不是只能取[0,1]吗?
没错,但是我们在高中不是学过复合函数吗,我们给alpha套上一个由[0,1]映射到[0,1]的函数
--那不是屁用没有吗?
听上去确实是这样,因为这是从一维的角度来看的//是光从连续的值的角度来看的
但我们把它画成二维的图像,这样就有所区别了
//但你没学过导数吗,求个导这能一样吗
同时,要注意到,在这里计算机的运算是离散的,
如果我们将alpha的定义域拆成一系列等距的点,
此时会发现,值域上的点密度是不一定相等的
例如,在这里我们给alpha套上一个smooth函数
接着,我们将alpha的定义域分割成等距的20份,
在每一个时间点,我们都将函数的值算出来,得到一系列不等距的点
再将这些不等距的点传入插值函数,算出每一帧的画面,
最后让alpha从0线性变换到1,就可以发现,整个过程大致呈现出一段先加速再减速的过程
而这,就是rate function
我们将这些函数的曲线画出来,
呦呦呦,这不Ae里的速率曲线吗,几天没见,这么拉了(草)

上期视频向大家提到了一点updater的用法,其原理可以理解为,
在每个动画的过程中,都给这个物件添加了更新,而它的更新函数就是你传入的函数对象,
在此过程中,根据你传入的函数对象,计算出每段动画中物件的起止点,
再根据这个函数进行插值,运算出每一帧的画面,得到最终的视频

但是有时候,我们可能只需要使用一次更新,或者间断的使用,
频繁的添加和删除可能就显得有些繁琐
这时有两个动画类就显得比较有用了
UpdateFromFunc & UpdateFromAlphaFunc
这两个类的作用,就是重写插值函数
//实际上,通过使用这两个动画类,你就重写了插值函数
前者就是让物件,根据传入的函数来进行更新
同样,要注意的是,这里传入的,依然是一个函数对象,而不是已经传入参数的实例
而UpdateFromAlphaFunc,在定义函数的时候,需要额外传入一个参数alpha
但它和前者基本一致,只不过多了插值中的关键参数alpha,
因此,你可以更灵活的运用它,例如你可以用它写出移动加旋转的效果
或者毫不夸张的说,只要够肝,可以用它写出manim已有的所有动画
虽然我也花了不少时间才研究出如何用它来实现Transform
总结一下,我们目前了解到的add_updater无非就是传入函数,绑定,插值算出每一帧的画面
运用刚刚讲到的两个类,我们可以做到turn updater into animation
那有没有将动画类变成更新的方法呢?
有,这一部分将在下一期dt讲完之后再进行讲解
在manim中已经定义好的动画类相对来说比较固定,
但是将动画转变为更新,再与其他更新组合起来,相对来说就更加灵活了

turn_animation_into_updater


最后提一嘴,如果我们在UpdateFromFunc中传入与参数无关的物件,给物件进行了变换
这个无关物件,有时候依然会更新
就比如说是你请客一个陌生人到自己家吃饭
饭大家都能吃,但是陌生人过意不去,不愿意吃
所以这一种做法有时候可行,但不是特别推荐(出bug了别找我)