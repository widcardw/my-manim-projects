#3 dt  time based updater and animation

提到dt, 大家应该能想到微分吧, 这应该算是我们学习路途中的一道坎
高中时候, 教材要求我们要学会求导, 我们大概能了解对路程求导得到速度, 对速度求导得到加速度
但各种零点, 极值点, 增减性, 不动点这类题目, 让我们逐渐把导数认为是一个功利化的工具, 
而忘记了它本身能够表达的涵义

好的, 扯远了, 在这里, dt也可以看作是微分, 不过是对视频时间的微分
人类的眼部和大脑会选择性的接受看到的内容, 将离散的每一帧的图片拼接成连续的视频
而一帧的时长, 和微分类似, 只要分的够细, 就可以近似的看作是连续的
如果我们想获取dt的具体值, 很简单, 它就是帧率的倒数, 
在场景类中可以这么表示 dt = 1 / self.camera.frame_rate
场景的相机会根据你的命令, 对帧率进行设置, 帧率越高, 画面看上去越连贯, 同时要计算的画面也就越多

通过对manim初步的学习, 我们大致了解到了, 
调用Scene的play方法可以生成一段有初始和终止的动画
而调用Scene的wait方法可以使画面静止一段时间

讲了这么多, 大家还记得开头的标题是什么吗?
Time based updater
dt的功能, 就是让场景中的物件能够基于时间流逝而进行更新
换言之, 只要添加了一个更新, 并且这个更新函数包含了参数dt
那么它就会无视play和wait的对动画的限制, 只跟随时间而更新状态
正因为如此, 这种更新方式就无视了前两期讲过的alpha, 
在动画的构想中, 你就只需要清楚物件的初始状态, 并不需要知道它的结束状态
最后wait合适长度的时间, 就能完成这段动画了
追逐曲线和东方弹幕游戏就是一个很好的例子
在这里就直接作为示例呈现给大家

追逐曲线在之前写过, 在这里我再稍微详细的解释一下
首先, 点A向点B运动, 点B向点C运动, 点C向点D运动, 点D向点A运动
然后把四个点依次连接, 最后保留直线的轨迹
这里稍微用到了一些小技巧, 将更新函数包装起来, 返回一个函数对象
使它可以接受其他参数, 这样能够避免重复的劳动
点的运动已经写好了, 后面的就是加上连线以及保留连线的轨迹了
给轨迹的集合加上更新, 最后将这些物件都添加到场景中
在这里大家应该能注意到, 我有意的避免了在更新函数中无关物件的变化
因为这样做可能会有BUG

之前也给大家看过模仿波与粒弹幕的视频, 这期视频终于向大家揭晓它的制作过程了
当然在这之前你需要有一些数学基础, 并且能够理解MC锑块的视频内容
首先我们继承三角类, 创建一个雨滴形状的物件
通过修改锚点的位置, 来修改物件的形状
由于我们需要对子弹进行旋转, 所以将get_angle和rotate两个方法优化了一下
下面进入场景的构建
在这里我们要给一个VGroup进行更新, 不断地向其中添加子弹
已经发射的子弹会做匀速直线运动, 当距离足够远时就删除这个子弹
只要控制子弹的发射角, 就能改变弹幕的总体观感
发射角跟随时间进行线性变换, 那么弹道就呈现出匀速旋转的效果
发射角与时间呈非线性关系时, 就能看到变化的伪线

由于dt的特殊性, 它也是实现动画插播的一种途径
但也正是因为它实际上是进行逐帧运算, 
我们就只能编写特定的函数, 利用数学方法, 才能达到加减速运动效果

还记得视频开头的动画吗, 这些就是用含有dt的变化来制作的
由于这段动画用到了turn animation into updater
所以在这里也就向大家大致呈现它的原理
这个方法会将一个动画类转变为, 或者说是嵌入到含时间的更新中
由于动画类大多都是由插值函数和alpha控制的
因而只需要在时间变化时改变alpha的值就可以了
这里有一个参数cycle, 当它为True时就会保持循环播放
本质上就是对alpha进行了模1运算
如果cycle为False, 那么就只会播放一次

在此期间, 你可以给这个物件添加其他的更新, 这样就可以达到更加丰富的效果了
当然, 因为这个方法本质是将动画转变为更新, 所以在后续调用之前记得先clear_updaters

总结一下, 前面讲到的动画是通过插值和alpha来完成的
updater的作用是让物件在动画的插值过程中进行实时更新
而包含dt的updater, 就是让物件根据时间变化而进行更新

剩下来的内容, 包括ValueTracker, TracedPath, 自定义物件
大家都可以通过阅读源码来学习它们的用法, 实际操作可以去看一看之前的教程

