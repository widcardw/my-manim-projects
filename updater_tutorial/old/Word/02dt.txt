上期视频我们大致了解了add_updater和ValueTracker是怎样使用的
顺便,在最后也提到了一下dt
dt
是manim中的一个时间计量单位,
如果换算成秒,在数值上等于视频帧率的倒数,即1/FPS
这里有一个例子,在函数中传入物件和dt,然后打印出dt的值
由于我在这里设置的是30帧,所以dt的值大约等于1/30
如果以60帧输出的话,dt的值就是1/60,在这里我就不再演示了

上期视频中提到了,这样一个函数在wait的过程中,物件没有继续运动
因为wait时能够更新的必须是含时间的updater,而它并没有包含有关时间的元素
所以,它只会在play的时候进行更新

这次我们将dt传进去,让它变成一个含时间的函数
这样,在wait的过程中这个函数依然会保持更新
我们测试一下,wait的过程中,这个点依然在运动

在这里我们给出一个例子,是让点跟随时间运动
让点在每一帧都向右平移dt的距离,那么它在每秒就会平移一个单位长度
然后我们wait14秒,那么它就会从-7的位置移动到+7的位置

由于dt的数值只跟视频的帧率有关,而且随着帧率的不同也会有不同的数值
所以在一些情况下我们只是把它当作一个工具参数,
在写函数的过程中有时并不会真正用到它,而会传入其它的值来控制速度

下面我们给出一个例子,是一个点按椭圆轨迹运动
定义一个场景中的全局变量t,作为一个参数
椭圆上的动点我们暂时先用参数方程来表示,
之后的教程中我们会引入一些更简单的方法
在更新函数中,我们让t的值每一帧增加dt,那么一秒钟就会增加个单位
用一个浮点数来显示t的值
最后用不着写play,直接wait就可以了
我们发现,浮点数的更新中并没有包含时间,但它仍然在运作
这个可能要请大佬来帮忙解释一下了

先稍微介绍一下save_state()和restore()的用法
save_state是将物件当前的位置状态保存下来,
restore是将物件转换为之前保存的状态
这里给大家看一个简单的例子
调用到restore时,正方形会恢复到原来的状态

然后我们再来看一个稍微复杂一些的例子
首先我们将向量和圆封装到一个VGroup里面
接着写出两个组合的更新函数
我们先在前面保存一下第二组的状态
然后让它旋转第一组相反的角度
最后移动到第一组向量的尾部
把物件添加进场景,测试一下画面
现在再加上这条正弦波,依然是采用与上期视频类似的方式
